package com.khorn.terraincontrol.generator.biome.layers.release_1_7;

import com.khorn.terraincontrol.generator.biome.ArraysCache;
import com.khorn.terraincontrol.generator.biome.layers.Layer;
import com.khorn.terraincontrol.util.minecraftTypes.DefaultBiome;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import static com.khorn.terraincontrol.generator.biome.layers.release_1_7.LayerR17.compareBiomes;

public class LayerHills extends LayerR17
{

    private static final Logger logger = LogManager.getLogger();
    private Layer child2;

    public LayerHills(long seed, Layer parentLayer, Layer parent2Layer)
    {
        super(seed);
        this.child = parentLayer;
        this.child2 = parent2Layer;
    }

    /**
     * Returns a list of integer values generated by this layer. These may be
     * interpreted as temperatures, rainfall amounts, or biomeList[] indices
     * based on the particular GenLayer subclass.
     */
    @Override
    public int[] getInts(ArraysCache cache, int x, int z, int xSize, int zSize)
    {
        int[] childInts = this.child.getInts(cache, x - 1, z - 1, xSize + 2, zSize + 2);
        int[] childInts2 = this.child2.getInts(cache, x - 1, z - 1, xSize + 2, zSize + 2);
        int[] thisInts = cache.getArray(xSize * zSize);

        for (int zi = 0; zi < zSize; ++zi)
        {
            for (int xi = 0; xi < xSize; ++xi)
            {
                this.initChunkSeed((long) (xi + x), (long) (zi + z));
                int selection1 = childInts[xi + 1 + (zi + 1) * (xSize + 2)];
                int selection2 = childInts2[xi + 1 + (zi + 1) * (xSize + 2)];
                boolean s2Check = (selection2 - 2) % 29 == 0;

                if (selection1 > 255)
                {
                    logger.debug("old! " + selection1);
                }

                if (selection1 != 0 && selection2 >= 2 && (selection2 - 2) % 29 == 1 && selection1 < 128)
                {
                    if (DefaultBiome.getBiome(selection1 + 128) != null)
                    {
                        thisInts[xi + zi * xSize] = selection1 + 128;
                    } else
                    {
                        thisInts[xi + zi * xSize] = selection1;
                    }
                } else if (this.nextInt(3) != 0 && !s2Check)
                {
                    thisInts[xi + zi * xSize] = selection1;
                } else
                {
                    int newPiece = selection1;
                    int chance;

                    if (selection1 == DefaultBiome.DESERT.Id)
                    {
                        newPiece = DefaultBiome.DESERT_HILLS.Id;
                    } else if (selection1 == DefaultBiome.FOREST.Id)
                    {
                        newPiece = DefaultBiome.FOREST_HILLS.Id;
                    } else if (selection1 == DefaultBiome.BIRCH_FOREST.Id)
                    {
                        newPiece = DefaultBiome.BIRCH_FOREST_HILLS.Id;
                    } else if (selection1 == DefaultBiome.ROOFED_FOREST.Id)
                    {
                        newPiece = DefaultBiome.PLAINS.Id;
                    } else if (selection1 == DefaultBiome.TAIGA.Id)
                    {
                        newPiece = DefaultBiome.TAIGA_HILLS.Id;
                    } else if (selection1 == DefaultBiome.MEGA_TAIGA.Id)
                    {
                        newPiece = DefaultBiome.MEGA_TAIGA_HILLS.Id;
                    } else if (selection1 == DefaultBiome.COLD_TAIGA.Id)
                    {
                        newPiece = DefaultBiome.COLD_TAIGA_HILLS.Id;
                    } else if (selection1 == DefaultBiome.PLAINS.Id)
                    {
                        if (this.nextInt(3) == 0)
                        {
                            newPiece = DefaultBiome.FOREST_HILLS.Id;
                        } else
                        {
                            newPiece = DefaultBiome.FOREST.Id;
                        }
                    } else if (selection1 == DefaultBiome.ICE_PLAINS.Id)
                    {
                        newPiece = DefaultBiome.ICE_MOUNTAINS.Id;
                    } else if (selection1 == DefaultBiome.JUNGLE.Id)
                    {
                        newPiece = DefaultBiome.JUNGLE_HILLS.Id;
                    } else if (selection1 == DefaultBiome.OCEAN.Id)
                    {
                        newPiece = DefaultBiome.DEEP_OCEAN.Id;
                    } else if (selection1 == DefaultBiome.EXTREME_HILLS.Id)
                    {
                        newPiece = DefaultBiome.EXTREME_HILLS_PLUS.Id;
                    } else if (selection1 == DefaultBiome.SAVANNA.Id)
                    {
                        newPiece = DefaultBiome.SAVANNA_PLATEAU.Id;
                    } else if (compareBiomes(selection1, DefaultBiome.MESA_PLATEAU_FOREST.Id))
                    {
                        newPiece = DefaultBiome.MESA.Id;
                    } else if (selection1 == DefaultBiome.DEEP_OCEAN.Id && this.nextInt(3) == 0)
                    {
                        chance = this.nextInt(2);

                        if (chance == 0)
                        {
                            newPiece = DefaultBiome.PLAINS.Id;
                        } else
                        {
                            newPiece = DefaultBiome.FOREST.Id;
                        }
                    }

                    if (s2Check && newPiece != selection1)
                    {
                        if (DefaultBiome.getBiome(newPiece + 128) != null)
                        {
                            newPiece += 128;
                        } else
                        {
                            newPiece = selection1;
                        }
                    }

                    if (newPiece == selection1)
                    {
                        thisInts[xi + zi * xSize] = selection1;
                    } else
                    {
                        int northCheck = childInts[xi + 1 + (zi + 1 - 1) * (xSize + 2)];
                        int southCheck = childInts[xi + 1 + (zi + 1 + 1) * (xSize + 2)];
                        int eastCheck = childInts[xi + 1 + 1 + (zi + 1) * (xSize + 2)];
                        int westCheck = childInts[xi + 1 - 1 + (zi + 1) * (xSize + 2)];
                        int count = 0;

                        if (compareBiomes(northCheck, selection1))
                        {
                            ++count;
                        }

                        if (compareBiomes(eastCheck, selection1))
                        {
                            ++count;
                        }

                        if (compareBiomes(westCheck, selection1))
                        {
                            ++count;
                        }

                        if (compareBiomes(southCheck, selection1))
                        {
                            ++count;
                        }

                        if (count >= 3)
                        {
                            thisInts[xi + zi * xSize] = newPiece;
                        } else
                        {
                            thisInts[xi + zi * xSize] = selection1;
                        }
                    }
                }
            }
        }

        return thisInts;
    }

}
