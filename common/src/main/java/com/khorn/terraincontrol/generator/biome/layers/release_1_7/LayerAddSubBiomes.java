package com.khorn.terraincontrol.generator.biome.layers.release_1_7;

import com.khorn.terraincontrol.generator.biome.ArraysCache;
import com.khorn.terraincontrol.generator.biome.layers.Layer;
import com.khorn.terraincontrol.util.minecraftTypes.DefaultBiome;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import static com.khorn.terraincontrol.generator.biome.layers.release_1_7.LayerR17.compareBiomes;

//>>	LayerHills
public class LayerAddSubBiomes extends LayerR17
{

    private static final Logger logger = LogManager.getLogger();
    private Layer childRiver;

    public LayerAddSubBiomes(long seed, Layer BiomeLayer, Layer RiverLayer)
    {
        super(seed);
        this.child = BiomeLayer;
        this.childRiver = RiverLayer;
    }

    /**
     * Returns a list of integer values generated by this layer. These may be
     * interpreted as temperatures, rainfall amounts, or biomeList[] indices
     * based on the particular GenLayer subclass.
     */
    @Override
    public int[] getInts(ArraysCache cache, int x, int z, int xSize, int zSize)
    {
        int[] childBiomeInts = this.child.getInts(cache, x - 1, z - 1, xSize + 2, zSize + 2);
        int[] childRiverInts = this.childRiver.getInts(cache, x - 1, z - 1, xSize + 2, zSize + 2);
        int[] thisInts = cache.getArray(xSize * zSize);

        for (int zi = 0; zi < zSize; ++zi)
        {
            for (int xi = 0; xi < xSize; ++xi)
            {
                this.initChunkSeed((long) (xi + x), (long) (zi + z));
                int selectionChild = childBiomeInts[xi + 1 + (zi + 1) * (xSize + 2)];
                int selectionRiver = childRiverInts[xi + 1 + (zi + 1) * (xSize + 2)];
                boolean s2Check = (selectionRiver - 2) % 29 == 0;

                if (selectionChild > 255)
                {
                    logger.debug("old! " + selectionChild);
                }

                //>>	If selection @ child1Layer is not BG 0 && < 128 and selection @ child2Layer is 32||61||90||119||etc
                if (selectionChild != 0 && selectionRiver >= 2 && (selectionRiver - 2) % 29 == 1 && selectionChild < 128)
                {
                    //>>	Make Mutated Biome if possible
                    if (DefaultBiome.getBiome(selectionChild + 128) != null)
                    {
                        thisInts[xi + zi * xSize] = selectionChild + 128;
                    } else
                    {
                        thisInts[xi + zi * xSize] = selectionChild;
                    }
                //>>	is sel2 == 31||60||89||118||etc, 1 in 3 chance to set as sel1
                } else if (this.nextInt(3) != 0 && !s2Check)
                {
                    thisInts[xi + zi * xSize] = selectionChild;
                } else
                {
                    int newPiece = selectionChild;

                    if (selectionChild == DefaultBiome.DESERT.Id)
                    {
                        newPiece = DefaultBiome.DESERT_HILLS.Id;
                    } else if (selectionChild == DefaultBiome.FOREST.Id)
                    {
                        newPiece = DefaultBiome.FOREST_HILLS.Id;
                    } else if (selectionChild == DefaultBiome.BIRCH_FOREST.Id)
                    {
                        newPiece = DefaultBiome.BIRCH_FOREST_HILLS.Id;
                    } else if (selectionChild == DefaultBiome.ROOFED_FOREST.Id)
                    {
                        newPiece = DefaultBiome.PLAINS.Id;
                    } else if (selectionChild == DefaultBiome.TAIGA.Id)
                    {
                        newPiece = DefaultBiome.TAIGA_HILLS.Id;
                    } else if (selectionChild == DefaultBiome.MEGA_TAIGA.Id)
                    {
                        newPiece = DefaultBiome.MEGA_TAIGA_HILLS.Id;
                    } else if (selectionChild == DefaultBiome.COLD_TAIGA.Id)
                    {
                        newPiece = DefaultBiome.COLD_TAIGA_HILLS.Id;
                    } else if (selectionChild == DefaultBiome.PLAINS.Id)
                    {
                        if (this.nextInt(3) == 0)
                        {
                            newPiece = DefaultBiome.FOREST_HILLS.Id;
                        } else
                        {
                            newPiece = DefaultBiome.FOREST.Id;
                        }
                    } else if (selectionChild == DefaultBiome.ICE_PLAINS.Id)
                    {
                        newPiece = DefaultBiome.ICE_MOUNTAINS.Id;
                    } else if (selectionChild == DefaultBiome.JUNGLE.Id)
                    {
                        newPiece = DefaultBiome.JUNGLE_HILLS.Id;
                    } else if (selectionChild == DefaultBiome.OCEAN.Id)
                    { //>>	Add nearshore deep ocean!
                        newPiece = DefaultBiome.DEEP_OCEAN.Id;
                    } else if (selectionChild == DefaultBiome.EXTREME_HILLS.Id)
                    {
                        newPiece = DefaultBiome.EXTREME_HILLS_PLUS.Id;
                    } else if (selectionChild == DefaultBiome.SAVANNA.Id)
                    {
                        newPiece = DefaultBiome.SAVANNA_PLATEAU.Id;
                    } else if (compareBiomes(selectionChild, DefaultBiome.MESA_PLATEAU_FOREST.Id))
                    {
                        newPiece = DefaultBiome.MESA.Id;
                    } else if (selectionChild == DefaultBiome.DEEP_OCEAN.Id && this.nextInt(3) == 0)
                    { //>>	Add Deep_Ocean islands!!!

                        if (this.nextInt(2) == 0)
                        {
                            newPiece = DefaultBiome.PLAINS.Id;
                        } else
                        {
                            newPiece = DefaultBiome.FOREST.Id;
                        }
                    }

                    if (s2Check && newPiece != selectionChild)
                    {//>>	More setting of mutated biomes!
                        if (DefaultBiome.getBiome(newPiece + 128) != null)
                        {
                            newPiece += 128;
                        } else
                        {
                            newPiece = selectionChild;
                        }
                    }

                    if (newPiece == selectionChild)
                    {
                        thisInts[xi + zi * xSize] = selectionChild;
                    } else
                    {
                        int northCheck = childBiomeInts[xi + 1 + (zi + 1 - 1) * (xSize + 2)];
                        int southCheck = childBiomeInts[xi + 1 + (zi + 1 + 1) * (xSize + 2)];
                        int eastCheck = childBiomeInts[xi + 1 + 1 + (zi + 1) * (xSize + 2)];
                        int westCheck = childBiomeInts[xi + 1 - 1 + (zi + 1) * (xSize + 2)];
                        int count = 0;

                        if (compareBiomes(northCheck, selectionChild))
                        {
                            ++count;
                        }

                        if (compareBiomes(eastCheck, selectionChild))
                        {
                            ++count;
                        }

                        if (compareBiomes(westCheck, selectionChild))
                        {
                            ++count;
                        }

                        if (compareBiomes(southCheck, selectionChild))
                        {
                            ++count;
                        }

                        if (count >= 3)
                        {
                            thisInts[xi + zi * xSize] = newPiece;
                        } else
                        {
                            thisInts[xi + zi * xSize] = selectionChild;
                        }
                    }
                }
            }
        }

        return thisInts;
    }

}
